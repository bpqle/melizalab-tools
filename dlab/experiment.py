# -*- coding: utf-8 -*-
# -*- mode: python -*-
""" Utilities for parsing experiment logs """
from dlab import pprox
import logging

log = logging.getLogger('dlab.experiment')

def audiolog_to_trials(trials, data_file, sync_channel="channel37", sync_thresh=1.0):
    """ Parses a logfile from Margot's present_audio scripts and generates a pprox

    trials: the "presentation" field in the json output of present_audio.py
    data_file: open handle to the hdf5 file generated by open-ephys during the recording
    sync_channel: the name of the dataset containing the synchronization signal
    sync_thresh: the threshold for detecting the sync signal
    trials: number of trials per stimulus
    """
    import quickspikes as qs
    from arf import timestamp_to_float
    # Each element in this structure corresponds to a trial. In some cases the
    # data are stored as a dict/map, but the keys are just strings of the trial number
    n_trials = len(trials)
    expt_start = None
    sample_count = 0
    det = qs.detector(sync_thresh, 10)
    for i in range(n_trials):
        pproc = { "events": [] , "index": i}
        pproc.update(trials[str(i)])
        entry_name = "/rec_%d" % i
        entry = data_file[entry_name]
        pproc["trial"] = pprox.wrap_uuid(entry.attrs["uuid"])
        # get time relative to first trial
        entry_time = timestamp_to_float(entry.attrs["timestamp"])
        if expt_start is None:
            expt_start = entry_time
        pproc["offset"] = entry_time - expt_start
        # find the sync signal - we expect one and only one click
        dset = entry[sync_channel]
        pproc["recording"] = {"on": int(sample_count),
                              "off": int(sample_count + dset.size),
                              "sampling_rate": float(dset.attrs["sampling_rate"])}
        sample_count += dset.size
        clicks = det(dset[:].astype('d'))
        if len(clicks) != 1:
            log.error("%s: expected 1 click, detected %d", dset.name, len(clicks))
        else:
            pproc["stim_on"] = clicks[0] / dset.attrs["sampling_rate"]
        yield pproc


def audiolog2pprox_script(argv=None):
    """ CLI to generate a pprox from present_audio log """
    import sys
    import argparse
    import json
    import h5py as h5
    from dlab.core import setup_log

    p = argparse.ArgumentParser(
        description="generate pprox from trial structure in present_audio logfile")
    p.add_argument('--debug', help="show verbose log messages", action="store_true")
    p.add_argument("--output", "-o",
                   type=argparse.FileType('w', encoding='utf-8'),
                   default=sys.stdout,
                   help="name of output file. If absent, outputs to stdout")
    p.add_argument("logfile", help="log file generated by present_audio.py")
    p.add_argument("datafile", help="ARF file with recording from the experiment")
    args = p.parse_args(argv)
    setup_log(log, args.debug)

    with h5.File(args.datafile, "r") as afp:
        with open(args.logfile, "rt") as lfp:
            expt_log = json.load(lfp)
            trials = pprox.from_trials(audiolog_to_trials(expt_log.pop("presentation"), afp))
            trials.update(expt_log)
    json.dump(trials, args.output)


if __name__=="__main__":
    audiolog2pprox_script()
